// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "wilayah/domain"

	mock "github.com/stretchr/testify/mock"
)

// KotaData is an autogenerated mock type for the KotaData type
type KotaData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *KotaData) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *KotaData) GetAll() ([]domain.Kota, error) {
	ret := _m.Called()

	var r0 []domain.Kota
	if rf, ok := ret.Get(0).(func() []domain.Kota); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Kota)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertKota provides a mock function with given fields: newKota
func (_m *KotaData) InsertKota(newKota domain.Kota) (int, error) {
	ret := _m.Called(newKota)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Kota) int); ok {
		r0 = rf(newKota)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Kota) error); ok {
		r1 = rf(newKota)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, updatedData
func (_m *KotaData) Update(id int, updatedData domain.Kota) (int, error) {
	ret := _m.Called(id, updatedData)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, domain.Kota) int); ok {
		r0 = rf(id, updatedData)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Kota) error); ok {
		r1 = rf(id, updatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKotaData interface {
	mock.TestingT
	Cleanup(func())
}

// NewKotaData creates a new instance of KotaData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKotaData(t mockConstructorTestingTNewKotaData) *KotaData {
	mock := &KotaData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
