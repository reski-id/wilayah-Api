// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "wilayah/domain"

	mock "github.com/stretchr/testify/mock"
)

// KelurahanUsecase is an autogenerated mock type for the KelurahanUsecase type
type KelurahanUsecase struct {
	mock.Mock
}

// AddKelurahan provides a mock function with given fields: newKelurahan
func (_m *KelurahanUsecase) AddKelurahan(newKelurahan domain.Kelurahan) (int, error) {
	ret := _m.Called(newKelurahan)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Kelurahan) int); ok {
		r0 = rf(newKelurahan)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Kelurahan) error); ok {
		r1 = rf(newKelurahan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKelurahan provides a mock function with given fields: id
func (_m *KelurahanUsecase) DeleteKelurahan(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKelurahan provides a mock function with given fields:
func (_m *KelurahanUsecase) GetAllKelurahan() ([]domain.Kelurahan, error) {
	ret := _m.Called()

	var r0 []domain.Kelurahan
	if rf, ok := ret.Get(0).(func() []domain.Kelurahan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Kelurahan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKelurahan provides a mock function with given fields: id, UpdateKelurahan
func (_m *KelurahanUsecase) UpdateKelurahan(id int, UpdateKelurahan domain.Kelurahan) (int, error) {
	ret := _m.Called(id, UpdateKelurahan)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, domain.Kelurahan) int); ok {
		r0 = rf(id, UpdateKelurahan)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Kelurahan) error); ok {
		r1 = rf(id, UpdateKelurahan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKelurahanUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewKelurahanUsecase creates a new instance of KelurahanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKelurahanUsecase(t mockConstructorTestingTNewKelurahanUsecase) *KelurahanUsecase {
	mock := &KelurahanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
