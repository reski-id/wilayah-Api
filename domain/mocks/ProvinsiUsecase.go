// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "wilayah/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProvinsiUsecase is an autogenerated mock type for the ProvinsiUsecase type
type ProvinsiUsecase struct {
	mock.Mock
}

// AddProvinsi provides a mock function with given fields: newProvinsi
func (_m *ProvinsiUsecase) AddProvinsi(newProvinsi domain.Provinsi) (int, error) {
	ret := _m.Called(newProvinsi)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Provinsi) int); ok {
		r0 = rf(newProvinsi)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Provinsi) error); ok {
		r1 = rf(newProvinsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvinsi provides a mock function with given fields: id
func (_m *ProvinsiUsecase) DeleteProvinsi(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProvinsi provides a mock function with given fields:
func (_m *ProvinsiUsecase) GetAllProvinsi() ([]domain.Provinsi, error) {
	ret := _m.Called()

	var r0 []domain.Provinsi
	if rf, ok := ret.Get(0).(func() []domain.Provinsi); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Provinsi)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvinsi provides a mock function with given fields: id, UpdateProvinsi
func (_m *ProvinsiUsecase) UpdateProvinsi(id int, UpdateProvinsi domain.Provinsi) (int, error) {
	ret := _m.Called(id, UpdateProvinsi)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, domain.Provinsi) int); ok {
		r0 = rf(id, UpdateProvinsi)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Provinsi) error); ok {
		r1 = rf(id, UpdateProvinsi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProvinsiUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvinsiUsecase creates a new instance of ProvinsiUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvinsiUsecase(t mockConstructorTestingTNewProvinsiUsecase) *ProvinsiUsecase {
	mock := &ProvinsiUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
