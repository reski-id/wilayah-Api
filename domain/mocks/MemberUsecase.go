// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "wilayah/domain"

	mock "github.com/stretchr/testify/mock"
)

// MemberUsecase is an autogenerated mock type for the MemberUsecase type
type MemberUsecase struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: newMember
func (_m *MemberUsecase) AddMember(newMember domain.Member) (int, error) {
	ret := _m.Called(newMember)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Member) int); ok {
		r0 = rf(newMember)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Member) error); ok {
		r1 = rf(newMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMember provides a mock function with given fields: id
func (_m *MemberUsecase) DeleteMember(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMember provides a mock function with given fields:
func (_m *MemberUsecase) GetAllMember() ([]domain.Member, error) {
	ret := _m.Called()

	var r0 []domain.Member
	if rf, ok := ret.Get(0).(func() []domain.Member); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: id, UpdateMember
func (_m *MemberUsecase) UpdateMember(id int, UpdateMember domain.Member) (int, error) {
	ret := _m.Called(id, UpdateMember)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, domain.Member) int); ok {
		r0 = rf(id, UpdateMember)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Member) error); ok {
		r1 = rf(id, UpdateMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMemberUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemberUsecase creates a new instance of MemberUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemberUsecase(t mockConstructorTestingTNewMemberUsecase) *MemberUsecase {
	mock := &MemberUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
